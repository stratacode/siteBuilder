<div>
   <div id="findProductsView">
      <div id="findProductsForm" visible=":= !addInProgress" class="formField">
         <label for="searchTextField">Find products</label><input type="text" value=":=: searchText" changeEvent="=: doSearch()"/>
         <input type="image" class="findMediaButton" src="/icons/search.svg" clickEvent="=: doSearch()"/>
         <input type="image" class="clearMediaButton" src="/icons/x-square.svg" clickEvent="=: resetForm()"/>
      </div>
   </div>

   <div id="extraFormView">
      <div id="startAddView">
         <div visible=":= !addInProgress" class="formField confirmButtons">
            <input type="button" value="Add product" clickEvent="=: startAddProduct(false)" />
            <input type="button" class="rightButton" visible=":= product != null" value="Copy product" clickEvent="=: startAddProduct(true)"/>
         </div>
      </div>

      <div id="detailFormView" class="formContainer" visible=':= product != null'>
         <div class="formTitle"> <%= addInProgress ? "Unsaved product" : "Update product" %></div>
         <div id="nameFieldView" class="formField">
            <label for="nameField">Product name</label>
            <input id="nameField" type="text" value=":=: product.name" changeEvent="=: updateProductName(value)"
                   class=':= product.propErrors.get("name") == null ? "fieldInput" : "fieldInputError"' placeholder="display name"/>
         </div>
         <div id="nameErrorView" class="formError"><%= product.propErrors.get("name") %></div>
         <div id="pathNameView" class="formField">
            <label for="pathNameField">Path name</label>
            <input id="pathNameField" type="text" value=":= product.pathName" changeEvent="=: updatePathName(value)"
                   class=':= product.propErrors.get("pathName") == null ? "fieldInput" : "fieldInputError"'
                   placeholder="browser location name (no spaces)"/>
         </div>
         <div id="visibleView" class="formField">
            <label for="visibleField">Product is available</label>
            <input id="visibleField" type="checkbox" checked=":=: product.visible"/>
         </div>
         <div id="pathNameErrorView" class="formError"><%= product.propErrors.get("pathName") %></div>
         <div id="parentCategoryView" class="formField">
            <label for="parentCategoryField">Parent category path</label>
            <input id="parentCategoryField" type="text" list="= parentCategorySuggestions.getId()"
                   class=':= product.propErrors.get("parentCategory") == null ? "fieldInput" : "fieldInputError"'
                   value=':= category == null ? "" : category.pathName'
                   keyUpEvent="=: updateMatchingCategories(value)" changeEvent="=: updateParentCategory(value)"
                   placeholder="search for category"/>
            <datalist id="parentCategorySuggestions">
               <option repeat=":= matchingCategories" repeatVarName="matchingCat" value=":= matchingCat.pathName"/>
            </datalist>
            <input class="rightButton" type="button" value="Add Category" clickEvent="=: startAddCategory()" disabled=":= showCategoryView"/>
            <input visible=":= categoryEditable" class="rightButton" type="button" value="Edit Category" clickEvent="=: showCategoryView = true"/>
         </div>
         <div id="parentCategoryErrorView" class="formError"><%= product.propErrors.get("parentCategory") %></div>
         <div id="addCategoryView" class=':= showCategoryView ? "subFormView detailView openDetail" : "subFormView detailView closedDetail"'>
            <%! int openCatViewHeight = 100;
            scrollHeight =: scrollHeight > 50 ? openCatViewHeight = scrollHeight : null; %>
            <style type="text/css">
               #addCategoryView.openDetail {
                  max-height: <%= openCatViewHeight + 100 %>px;
               }
            </style>
            <%! boolean enableAddCategory := category == null || addCategoryInProgress; %>
            <span class="subFormTitle"><%= enableAddCategory ? "Add Category" : "Update category" %></span>
            <div id="catNameView" class="formField">
               <label for="catNameField">Category name</label>
               <input type="text" id="catNameField" value=":= category.name" changeEvent="=: updateCategoryName(value)"
                      class=':= category.propErrors.get("name") == null ? "fieldInput" : "fieldInputError"'
                      placeholder="display name"/>
            </div>
            <div id="catPathNameView" class="formField">
               <label for="catPathNameField">Category path name</label>
               <input type="text" id="catNameField" value=":= category.pathName" changeEvent="=: updateCategoryPathName(value)"
                      class=':= category.propErrors.get("pathName") == null ? "fieldInput" : "fieldInputError"'
                      placeholder="browser location name (no spaces)"/>
            </div>
            <div id="addCategoryButtons" class="formField confirmButtons" visible=":= addCategoryInProgress">
               <input type="button" clickEvent="=: completeAddCategory()" value="Add Category"/>
               <input type="button" class="rightButton" clickEvent="=: cancelAddCategory()" value="Cancel"/>
               <div id="alt" class="formField confirmButtons">
                  <input type="button" clickEvent="=: doneEditingCategory()" value="Done editing category"/>
               </div>
            </div>
         </div>

         <div id="shortDescView" class="formField">
            <label for="shortDescField">Short description</label>
            <input id="shortDescField" type="text" value=":=: product.shortDesc" class="wideTextField" placeholder="product summary"/>
         </div>

         <div id="longDescView" class="subFormView">
            <label for="longDescText" class="subFormTitle">Long description</label>
            <div id="longDescText" class="longDescText" extends="HtmlTextEditor" placeholder="detailed product description" content=":= product.longDesc"
                 content="=: longDescHtml = content"/>
         </div>

         <div id="skuView" class="formField">
            <label for="skuField">Product Sku</label>
            <input id="skuField" type="text" list="= skuSuggestions.getId()" disabled=":= showSkuView"
                   class=':= skuFindErrorMessage == null ? "fieldInput" : "fieldInputError"'
                   value=":= product.sku == null ? "" : product.sku.skuCode"
                   keyUpEvent="=: updateMatchingSkus(value)" changeEvent="=: updateProductSku(value)"
                   placeholder="search for skus"/>
            <datalist id="skuSuggestions">
               <option repeat=":= matchingSkus" repeatVarName="matchingSku" value=":= matchingSku.skuCode"/>
            </datalist>
            <input class="rightButton" type="button" value="Add Sku" clickEvent="=: startAddSku()" disabled=":= showSkuView"/>
            <input visible=":= skuEditable" class="rightButton" type="button" value="Edit Sku" clickEvent="=: showSkuView = true"/>
         </div>
         <div id="skuErrorView" class="formError"><%= skuFindErrorMessage %></div><div class="formStatus"><%= skuStatusMessage %></div>

         <div id="addSkuView" class=':= showSkuView ? "subFormView detailView openDetail" : "subFormView detailView closedDetail"'>
            <%! int openViewHeight = 500;
                scrollHeight =: scrollHeight > 50 ? openViewHeight = scrollHeight : null; %>
            <style type="text/css">
               #addSkuView.openDetail {
                  max-height: <%= openViewHeight + 100 %>px;
               }
            </style>
            <%! boolean enableAddSku := sku == null || addInProgress; %>
            <span class="subFormTitle"><%= enableAddSku ? "Add Sku" : "Update sku" %></span>
            <div class="formField">
               <label>Product type</label>
               <input type="radio" id="digitalRadio" name="skuType" checked=":= skuTypeId == 1"
                      changeEvent="=: checked ? updateSkuType(1) : null" value="1" disabled=":= !enableAddSku"/>
               <div>
                  <label for="digitalRadio">Digital</label>
                  <input type="radio" id="physicalRadio" name="skuType" checked=":= skuTypeId == 2"
                         changeEvent="=: checked ? updateSkuType(2) : null" value="2" disabled=":= !enableAddSku"/>
                  <label for="physicalRadio">Physical</label>
               </div>
            </div>
            <div id="skuCodeView" class="formField">
               <label for="skuCodeField">Sku code</label>
               <input type="text" id="skuCodeField" value=":= sku.skuCode" changeEvent="=: updateSkuCode(value)"
                      class=':= sku.propErrors.get("skuCode") == null ? "fieldInput" : "fieldInputError"'
                      placeholder="code for tracking orders and inventory"/>
            </div>
            <div id="skuCodeError" class="formError"> <%= sku.propErrors.get("skuCode") %> </div>
            <div id="barCodeView" class="formField">
               <label for="barCodeField">Bar code</label>
               <input type="text" id="barCodeField" value=":=: sku.barCode"
                      class=':= sku.propErrors.get("barCode") == null ? "fieldInput" : "fieldInputError"'
                      placeholder="optional"/>
            </div>
            <div id="barCodeError" class="formError"> <%= sku.propErrors.get("barCode") %> </div>
            <div id="priceView" class="formField">
               <label for="priceField">Price</label>
               <input type="text" id="priceField" value=":= sku.priceStr" changeEvent="=: sku.updatePrice(value)"
                      class=':= sku.propErrors.get("price") == null ? "fieldInput" : "fieldInputError"'/>
            </div>
            <div id="priceError" class="formError"> <%= sku.propErrors.get("price") %> </div>
            <div id="discountPriceView" class="formField">
               <label for="discountPriceField">Discount price</label>
               <input type="text" id="discountPriceField" value=":= sku.discountPriceStr"
                      class=':= sku.propErrors.get("discountPrice") == null ? "fieldInput" : "fieldInputError"'
                      changeEvent="=: sku.updateDiscount(value)" placeholder="optional"/>
            </div>
            <div id="discountPriceError" class="formError">
               <%= sku.propErrors.get("discountPrice") %>
            </div>
            <div id="physicalSkuView" visible=":= psku != null">
               <div id="weightView" class="formField">
                  <label for="weightField">Weight</label>
                  <input type="text" id="weightField" changeEvent="=: psku.updateWeight(value)"
                         class=':= sku.propErrors.get("weight") == null ? "fieldInput" : "fieldInputError"'/>
               </div>
               <div id="weightError" class="formError">
                  <%= sku.propErrors.get("weight") %>
               </div>
               <div id="heightView" class="formField">
                  <label for="heightField">Height</label>
                  <input type="text" id="heightField" changeEvent="=: psku.updateHeight(value)"
                         class=':= sku.propErrors.get("height") == null ? "fieldInput" : "fieldInputError"'/>

               </div>
               <div id="heightError" class="formError">
                  <%= sku.propErrors.get("height") %>
               </div>
               <div id="lengthView" class="formField">
                  <label for="lengthField">Length</label>
                  <input type="text" id="lengthField" changeEvent="=: psku.updateLength(value)"
                         class=':= sku.propErrors.get("length") == null ? "fieldInput" : "fieldInputError"'/>
               </div>
               <div id="lengthError" class="formError">
                  <%= sku.propErrors.get("length") %>
               </div>
               <div class="checkFormView">
                  <input type="checkbox" id="inventoryCheckbox" checked=":= psku.inventory != null" changeEvent="=: updateManageInventory(checked)"/>
                  <label for="inventoryCheckbox">Manage inventory?</label>
               </div>
               <div id="inventoryView" visible=":= psku.inventory != null" class="formField">
                  <label for="quantityField">Quantity</label>
                  <input type="number" min="0" id="quantityField" value=":= String.valueOf(psku.inventory.quantity)" changeEvent="=: psku.inventory.updateQuantityStr(value)"/>
               </div>
               <div id="nextAvailView" class="formField" visible=":= psku.inventory != null">
                  <label for="nextAvailField">Next available</label>
                  <input disabled=":= psku.inventory.quantity > 0"
                         type="date" id="nextAvailField"
                         min="= ProductInventory.minNextAvailDateStr"
                         changeEvent="=: psku.inventory.updateNextAvailStr(value)"/>
               </div>
            </div>
            <div id="optionsWrapperView">
               <div class="checkFormView">
                  <input id="hasOptionCheckbox" type="checkbox" checked=":= sku.optionScheme != null || showOptionsView" changeEvent="=: updateHasOptions(checked)"/>
                  <label for="hasOptionCheckbox">Has options?</label>
               </div>
               <div id="optionsView" visible=':= showOptionsView'>
                  <div class="subFormTitle">Sku options</div>
                  <div id="optionsSchemeFieldView" class="formField">
                     <label for="optionSchemeField">Option scheme name</label>
                     <input id="optionsSchemeField" type="text" list="= optionSchemeSuggestions.getId()"
                            value=":= sku.optionScheme == null ? "" : sku.optionScheme.schemeName"
                            disabled=":= showOptionSchemeView"
                            keyUpEvent="=: updateMatchingOptionSchemes(value)"
                            changeEvent="=: updateOptionScheme(value)"/>
                     <datalist id="optionSchemeSuggestions">
                        <option repeat=":= matchingOptionSchemes" repeatVarName="matchedScheme" value=":= matchedScheme.schemeName"/>
                     </datalist>
                     <input type="button" value="Add option scheme" class="rightButton"
                            clickEvent="=: startNewOptionScheme()" disabled=":= showOptionSchemeView"/>
                     <input type="button" value="Edit option scheme" class="rightButton"
                            clickEvent="=: doEditOptionScheme()" visible=":= editableOptionScheme"/>
                  </div>
                  <div class="formStatus"><%= optionStatusMessage %></div>
                  <div id="optionSchemeView" class=':= showOptionSchemeView ? "subFormView detailView openDetail" : "subFormView detailView closedDetail"'>
                     <%! int openSchemeHeight = 500;
                     scrollHeight =: scrollHeight > 200 ? openSchemeHeight = scrollHeight : null; %>
                     <style type="text/css">
                        #optionSchemeView.openDetail {
                           max-height: <%= openSchemeHeight + 100 %>px;
                     }
                     </style>
                     <div class="subFormTitle"><%= editableOptionScheme ? "Update" : "New" %> option scheme</div>
                     <div class="formField">
                        <label for="schemeNameField">Name</label>
                        <input id="schemeNameField" type="text" value=":=: optionScheme.schemeName"
                               class=':= optionScheme.propErrors.get("schemeName") == null ? "fieldInput" : "fieldInputError"'
                               changeEvent="=: validateOptionSchemeName()"/>
                     </div>
                     <div class="formError"><%= optionScheme.propErrors.get("schemeName") %></div>

                     <div class="boxTitle">List of options</div>
                     <div class="optionListView">
                        <%!
                           ProductOption focusedProductOption := ProductManagerView.this.newProductOption;

                           override @Bindable(doLater=true, priority=-6)
                           focusedProductOption =: updateOptionFocusOnValue(focusedProductOption);
                           void updateOptionFocusOnValue(ProductOption val) {
                              int ix = optionScheme.options.indexOf(val);
                              if (ix != -1) {
                                 Object[] children = newOptionView_Repeat.getObjChildren(false);
                                 if (children != null && ix < children.length) {
                                    ((newOptionView_Repeat.newOptionView) children[ix]).optionFormView.optionNameField.focus();
                                 }
                              }
                           }
                        %>
                        <div id="newOptionView" class="newOptionView" repeat=":= optionScheme.options" repeatVarName="productOption">
                           <div id="optionFormView" class="formField">
                              <label for="optionNameField">Option #<%= newOptionView.this.repeatIndex+1 %> name</label>
                              <input type="text" id="optionNameField" value=":=: productOption.optionName"
                                     changeEvent="=: refreshOptionScheme()"
                                     placeholder="e.g. Size, Color"/>
                              <input type="image" class="clearOptionButton" src="/icons/x-square.svg"
                                     visible=":= optionScheme.options.size() > 1"
                                     clickEvent="=: removeOption(productOption)" tabindex="-1"/>
                           </div>
                           <div class="boxTitle">List of values</div>
                             <div class="optionValueList">
                                <%!
                                   // One way to avoid this would be to wrap the option values in a 'view' object
                                   // so that the model object itself has a 'takeFocus' property that is set so that
                                   // we can wire that do the 'focus()' call on change.
                                   OptionValue focusedOption := ProductManagerView.this.newOptionValue;
                                   override @Bindable(doLater=true, priority=-6)
                                   focusedOption =: updateFocusOnValue(focusedOption);
                                   void updateFocusOnValue(OptionValue val) {
                                       int ix = productOption.optionValues.indexOf(val);
                                       if (ix != -1) {
                                          Object[] children = newValueView_Repeat.getObjChildren(false);
                                          if (children != null && ix < children.length) {
                                             ((newValueView_Repeat.newValueView) children[ix]).optionValueNameField.focus();
                                          }
                                       }
                                      // else - might not be for the is option
                                   }
                                %>
                             <div id="newValueView" class="newValueView" repeat=":= productOption.optionValues" repeatVarName="optionValue">
                                <label for="optionValueNameField">Value #<%= newValueView.this.repeatIndex+1 %></label>
                                <input type="text" id="optionValueNameField" value=":=: optionValue.optionValue"
                                       changeEvent="=: refreshOptionScheme()"
                                       placeholder="e.g. Small, Blue"/>
                                <label for="optionValueNameField">sku symbol</label>
                                <input type="text" id="optionValueSkuField" value=":=: optionValue.skuSymbol"
                                       placeholder="e.g. sm, blu"/>
                                <label for="defaultOptionCheckbox">Default</label>
                                <input tabindex="-1" id="defaultOptionCheckbox" type="checkbox" checked=":= optionValue == productOption.defaultValue" changeEvent="=: productOption.defaultValue = optionValue"/>
                                <input tabindex="-1" visible=":= productOption.optionValues.size() > 1" type="image" class="clearOptionButton" src="/icons/x-square.svg"
                                       clickEvent="=: removeOptionValue(productOption, optionValue)"/>
                              </div>
                              <input type="button" class="endListButton" value="Add another value" clickEvent="=: addNewOptionValue(productOption, true)"/>
                           </div>
                        </div>
                        <input type="button" class="endListButton" value="Add another option" clickEvent="=: addNewOption()"/>
                        <input type="button" class="rightButton" value="Done editing option scheme" clickEvent="=: doneEditingOptionScheme()"
                               visible=":= editableOptionScheme"/>
                     </div>
                     <div class="formError"><%= optionErrorMessage %></div>
                     <div class="formField confirmButtons" visible=":= !editableOptionScheme">
                        <input type="button" value="Save option scheme" clickEvent="=: completeNewOptionScheme()"/>
                        <input type="button" class="rightButton" value="Cancel" clickEvent="=: cancelNewOptionScheme()"/>
                     </div>
                  </div>
                  <div id="skuOptionsView" visible=":= showSkuOptions">
                     <div id="invalidView" visible=":= invalidSkuOptions.size() > 0" class="skuListViewBox">
                        <div class="skuListTitle">Invalid options</div>
                        <div id="invalidList" class="skuListView">
                           <div id="invalidHeaderList" class="skuHeaderRow">
                              <span class="wideHeaderColumn">sku code</span>
                              <span class="wideHeaderColumn">options</span>
                           </div>
                           <div id="invalidOptionView" repeat=":= invalidSkuOptions" repeatVarName="invalidSku" class="skuRowView">
                              <span class="wideSkuColumn"><%= invalidSku.skuCode %></span>
                              <span class="wideSkuColumn"><span class=':= "optionValueCell" + repeatIndex' repeat=":= invalidSku.options" repeatVarName="optVal"><%= optVal.optionValue %></span></span>
                              <input type="image" class="removeSkuButton" src="/icons/x-square.svg" clickEvent="=: removeInvalidSku(invalidSku)"/>
                           </div>
                        </div>
                     </div>
                     <div id="missingView" visible=":= missingSkuOptions.size() > 0" class="skuListViewBox">
                       <div class="skuListTitle">Missing sku options</div>
                        <div id="missingList" class="skuListView">
                           <div id="missingHeaderList" class="skuHeaderRow">
                              <span class="wideHeaderColumn">sku code</span>
                              <span class="wideHeaderColumn">options</span>
                           </div>
                           <div id="missingOptionView" repeat=":= missingSkuOptions" repeatVarName="missingSku" class="skuRowView">
                              <span class="wideSkuColumn"><%= missingSku.skuCode %></span>
                              <span class="wideSkuColumn"><span class=':= "optionValueCell" + repeatIndex' repeat=":= missingSku.options" repeatVarName="optVal"><%= optVal.optionValue %></span></span>
                              <input class="rightButton" type="button" value="Add" clickEvent="=: addMissingSku(missingSku)"/>
                        </div>
                        </div>
                     </div>
                     <div id="validView" visible=":= validSkuOptions.size() > 0" class="skuListViewBox">
                        <div class="skuListTitle">Sku options</div>
                        <div id="validList" class="skuListView">
                           <div id="validHeaderList" class="skuHeaderRow">
                              <span class="wideHeaderColumn">sku code</span>
                              <span class="wideHeaderColumn">options</span>
                              <span visible=":= psku.inventory != null" bodyOnly="true">
                                 <span class="headerColumn">inventory</span>
                                 <span class="headerColumn">next available</span>
                              </span>
                           </div>
                           <div id="validOptionView" repeat=":= validSkuOptions" repeatVarName="validSku" class="skuRowView">
                              <span class="wideSkuColumn"><%= validSku.skuCode %></span>
                              <span class="wideSkuColumn"><span class=':= "optionValueCell" + repeatIndex' repeat=":= validSku.options" repeatVarName="optVal"><%= optVal.optionValue %></span></span>
                              <span visible=":= psku.inventory != null" bodyOnly="true">
                                 <span class="skuColumn">
                                    <input type="number"
                                           min="0" class="quantityCell"
                                           value=":= String.valueOf(validSku.inventory.quantity)"
                                           changeEvent="=: validSku.inventory.updateQuantityStr(value)"/>
                                 </span>
                                 <input disabled=":= validSku.inventory.quantity != 0" type="date" id="nextAvailField"
                                        min="= ProductInventory.minNextAvailDateStr"
                                        changeEvent="=: validSku.inventory.updateNextAvailStr(value)"/>
                              </span>
                           </div>
                        </div>
                     </div>
                     <div id="alt">
                        <div visible=":= sku.optionScheme != null" class="skuOptionsSummary">
                           <input type="button" value="Show sku options" clickEvent="=: showSkuOptions = true"/>
                           <%= invalidSkuOptions.size() %> invalid,
                           <%= missingSkuOptions.size() %> missing,
                           <%= validSkuOptions.size() %> valid
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div id="addSkuButtons" class="formField confirmButtons" visible=":= addSkuInProgress">
               <input type="button" clickEvent="=: completeAddSku()" value="Add Sku"/>
               <input type="button" class="rightButton" clickEvent="=: cancelAddSku()" value="Cancel"/>
               <div id="alt" class="formField confirmButtons">
                  <input type="button" clickEvent="=: doneEditingSku()" value="Done editing sku"/>
               </div>
            </div>
            <div class="formError"><%= skuAddErrorMessage %></div>
         </div>

         <div id="addMediaView" class="subFormView">
            <span class="subFormTitle">Product media</span>
            <span id="mediaTitle" visible=":= product.altMedia != null && product.altMedia.size() > 0">
               <span id="alt" class="mediaEmptyTitle">No media - add files from the library or upload new ones</span>
            </span>
            <div class="mediaImageList">
               <div id="prodMediaView" class="prodMediaView" repeat=":= product.altMedia" repeatVarName="media">
                  <img src=":= media.thumbUrl"/>
                  <span class="mediaInfoText"><%= media.uniqueFileName %></span>
                  <span class="mediaInfoText">
                     <input type="checkbox" checked=":= media == product.mainMedia" changeEvent="=: product.mainMedia = media"/> main
                     <input type="image" class="clearMediaButton" src="/icons/x-square-sm.svg" clickEvent="=: removeProductMedia(media.id)"/>
                  </span>
                  <span class="mediaInfoText"><input type="checkbox" checked=":=: product.visible"/> visible</span>
                  <span class="mediaInfoText"><%= media.filterPattern %></span>
               </div>
            </div>
            <div id="findMedia" class="formField">
               <label for="findMediaField">Add existing media</label>
               <input id="findMediaField" type="text" list="= findMediaSuggestions.getId()" value=":=: findMediaText"
                      keyUpEvent="=: updateMatchingMedia(value)" changeEvent="=: updateProductMedia(value)"
                      placeholder="search for media files"/>
               <datalist id="findMediaSuggestions">
                  <option repeat=":= matchingMedia" repeatVarName="matchedMedia" value=":= matchedMedia.uniqueFileName"/>
               </datalist>
            </div>
            <form id="addMediaForm" class="formField" method="post" enctype="multipart/form-data">
            <%!
               submitResult =: addMediaResult(submitResult);
               submitError =: addMediaError(submitError);
            %>
               <label for="uploadFile">Add new media</label>
               <input type="file" id="uploadFile" name="fileToUpload" accept=".jpg, .jpeg, .png"
                      changeEvent="=: addMediaForm.submitFormData("/mediaUpload")"/>
               <input id="mediaManagerIdField" type="hidden" name="mediaManagerId" value=":= String.valueOf(store.mediaManager.id)"/>
            </form>
            <div>
               <div visible=":= !addMediaForm.submitInProgress">
                  <div class="formError"><%= mediaErrorMessage %></div>
                  <div class="formStatus"><%= mediaStatusMessage%></div>
                  <div id="alt">
                     Uploading...
                  </div>
               </div>
            </div>
            <div id="mediaOptionsView" visible=":= sku != null && optionScheme != null" class="formField">
               <label for="mediaOptionRepeat">For options</label>
               <span id="mediaOptionRepeat" repeat=":= optionScheme.options" repeatVarName="productOption">
                  <select optionDataSource=":= productOption.optionFilterList" selectedIndex="0" class=':= mediaOptionRepeat.this.repeatIndex > 0 ? "rightButton" : ""'
                          changeEvent="=: updateMediaFilter(mediaOptionRepeat.this.repeatIndex, (String)selectedValue)"/>
               </span>
               <div id="alt" class="formMessage">Add options to Sku to load media for a particular set of options</div>
            </div>
         </div>

         <div id="addCancel" visible=":= addInProgress" class="formField confirmButtons">
            <input type="button" value="Save product" disabled=":= product == null || product.propErrors != null" clickEvent="=: doAddProduct()"/>
            <input type="button" class="rightButton" value="Cancel" clickEvent="=: cancelAddProduct()"/>

            <div id="alt" class="formField confirmButtons">
               <input type="button" value="Done editing product" clickEvent="=: doneEditingProduct()"/>
            </div>
         </div>
      </div>

      <span id="prodStatusView" class="errorMessage" visible=":= errorMessage != null">
         <%= errorMessage %>
         <div id="alt" class="statusMessage"><%= statusMessage %></div>
      </span>
   </div>

   <div id="listView">
      <div class="headerRow" visible=":= productList != null && productList.size() > 0">
         <span class="wideHeaderColumn">Name</span>
         <span class="headerColumn">Media</span>
         <span class="headerColumn">Pathname</span>
         <span class="headerColumn">Category</span>
         <span class="headerColumn">Sku code</span>
         <span class="headerColumn">Options</span>
         <span class="headerColumn">Visible</span>
         <span class="headerColumn">Remove</span>
      </div>
      <div id="productElemView" repeat=":= productList" repeatVarName="productElem"
           class=':= productElem == product ? "selectedProductRow" : "productRow"'>
        <span class="wideHeaderColumn" clickEvent="=: doSelectProduct(productElem)">
           <input type="checkbox" checked=":= product == productElem"/>
           <%= productElem.name %>
        </span>
        <span class="headerColumn" clickEvent="=: doSelectProduct(productElem)">
           <img src=":= productElem.mainMedia.thumbUrl"/>
        </span>
        <span class="headerColumn"> <%= productElem.pathName %> </span>
        <span class="headerColumn"> <%= productElem.parentCategory == null ? "none" : productElem.parentCategory.pathName %> </span>
        <span class="headerColumn"> <%= productElem.sku == null ? "no sku" : productElem.sku.getDisplaySummary(store) %> </span>
        <span class="headerColumn"> 
           <%= productElem.sku == null || productElem.sku.optionScheme == null ? "n/a" : productElem.sku.optionScheme.schemeName %>
         </span>
        <span class="headerColumn"> <input type="checkbox" checked=":=: productElem.visible"/> </span>
        <input type="image" class="removeProductButton" src="/icons/x-square.svg" clickEvent="=: removeProduct(productElem.id)"/>
      </div>
   </div>
</div>
